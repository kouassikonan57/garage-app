// service_provider.dart
import 'appointment_service.dart';
import 'loyalty_service.dart';
import 'client_service.dart';
import 'enriched_client_service.dart';

class ServiceProvider {
  static final ServiceProvider _instance = ServiceProvider._internal();
  factory ServiceProvider() => _instance;
  ServiceProvider._internal();

  late ClientService _clientService;
  late EnrichedClientService _enrichedClientService;
  late LoyaltyService _loyaltyService;
  late AppointmentService _appointmentService;
  bool _isInitialized = false;

  void initialize() {
    if (_isInitialized) return;

    print('üîÑ Initialisation des services...');

    try {
      // √âTAPE 1: Initialiser ClientService (aucune d√©pendance)
      _clientService = ClientService();
      print('‚úÖ ClientService initialis√©');

      // √âTAPE 2: Cr√©er des instances TEMPORAIRES pour r√©soudre les d√©pendances circulaires

      // Cr√©er un AppointmentService temporaire avec un LoyaltyService temporaire
      final tempLoyaltyService = LoyaltyService(
        clientService: _clientService,
        appointmentService: null, // Temporairement null
      );

      final tempAppointmentService = AppointmentService(
        loyaltyService: tempLoyaltyService,
      );

      // √âTAPE 3: Maintenant initialiser EnrichedClientService avec les instances temporaires
      _enrichedClientService = EnrichedClientService(
        appointmentService: tempAppointmentService, // ‚úÖ Param√®tre requis fourni
        clientService: _clientService, // ‚úÖ Param√®tre requis fourni
      );
      print('‚úÖ EnrichedClientService initialis√©');

      // √âTAPE 4: Cr√©er les VRAIES instances des services
      _loyaltyService = LoyaltyService(
        clientService: _clientService,
        appointmentService:
            tempAppointmentService, // Utiliser temporaire d'abord
      );

      _appointmentService = AppointmentService(
        loyaltyService: _loyaltyService,
      );
      print('‚úÖ Services principaux initialis√©s');

      // √âTAPE 5: R√âSOLUTION DES D√âPENDANCES CIRCULAIRES
      _resolveCircularDependencies();
      print('‚úÖ D√©pendances circulaires r√©solues');

      // √âTAPE 6: RECR√âER EnrichedClientService avec les vraies instances
      _recreateEnrichedClientService();
      print('‚úÖ EnrichedClientService mis √† jour avec les vraies instances');

      _isInitialized = true;
      print('üéØ TOUS les services initialis√©s avec succ√®s!');
    } catch (e) {
      print('‚ùå Erreur critique lors de l\'initialisation: $e');
      _initializeEmergencyFallback();
    }
  }

  void _resolveCircularDependencies() {
    try {
      // 1. Mettre √† jour LoyaltyService avec la VRAIE instance de AppointmentService
      _loyaltyService.updateAppointmentService(_appointmentService);
      print('‚úÖ LoyaltyService -> Vrai AppointmentService');

      // 2. Mettre √† jour AppointmentService avec la VRAIE instance de LoyaltyService
      _appointmentService.updateLoyaltyService(_loyaltyService);
      print('‚úÖ AppointmentService -> Vrai LoyaltyService');
    } catch (e) {
      print('‚ùå Erreur r√©solution d√©pendances circulaires: $e');
    }
  }

  void _recreateEnrichedClientService() {
    try {
      // Recr√©er EnrichedClientService avec les VRAIES instances maintenant disponibles
      _enrichedClientService = EnrichedClientService(
        appointmentService: _appointmentService, // ‚úÖ Vraie instance
        clientService: _clientService, // ‚úÖ Vraie instance
      );
      print('‚úÖ EnrichedClientService recr√©√© avec vraies d√©pendances');
    } catch (e) {
      print('‚ùå Erreur recr√©ation EnrichedClientService: $e');
      // On garde l'instance temporaire si la recr√©ation √©choue
    }
  }

  void _initializeEmergencyFallback() {
    print('üîÑ Lancement de l\'initialisation d\'urgence...');

    try {
      // Initialisation ultra-simplifi√©e sans r√©solution de d√©pendances complexes
      _clientService = ClientService();

      // Cr√©er des instances basiques pour les autres services
      final fallbackLoyaltyService = LoyaltyService(
        clientService: _clientService,
        appointmentService: null,
      );

      final fallbackAppointmentService = AppointmentService(
        loyaltyService: fallbackLoyaltyService,
      );

      _enrichedClientService = EnrichedClientService(
        appointmentService: fallbackAppointmentService,
        clientService: _clientService,
      );

      _loyaltyService = fallbackLoyaltyService;
      _appointmentService = fallbackAppointmentService;

      _isInitialized = true;
      print('‚úÖ Initialisation d\'urgence r√©ussie (fonctionnalit√©s limit√©es)');
    } catch (e) {
      print('‚ùå √âCHEC COMPLET de l\'initialisation: $e');
      throw Exception('IMPOSSIBLE de d√©marrer l\'application: $e');
    }
  }

  // GETTERS avec initialisation automatique
  AppointmentService get appointmentService {
    if (!_isInitialized) initialize();
    return _appointmentService;
  }

  LoyaltyService get loyaltyService {
    if (!_isInitialized) initialize();
    return _loyaltyService;
  }

  ClientService get clientService {
    if (!_isInitialized) initialize();
    return _clientService;
  }

  EnrichedClientService get enrichedClientService {
    if (!_isInitialized) initialize();
    return _enrichedClientService;
  }

  // M√©thodes utilitaires
  void reset() {
    _isInitialized = false;
    print('üîÑ R√©initialisation des services demand√©e...');
    initialize();
  }

  bool get isInitialized => _isInitialized;

  String get initializationStatus {
    if (!_isInitialized) return '‚ùå Non initialis√©';

    final services = [
      'ClientService',
      'EnrichedClientService',
      'LoyaltyService',
      'AppointmentService',
    ];

    return '‚úÖ Initialis√© (${services.length}/4 services)';
  }

  // M√©thode de d√©bogage - CORRIG√âE
  void debugServices() {
    print('\nüîç √âTAT DES SERVICES:');
    print('‚Ä¢ ClientService: ‚úÖ');
    print('‚Ä¢ EnrichedClientService: ‚úÖ');
    print('‚Ä¢ LoyaltyService: ‚úÖ');
    print('‚Ä¢ AppointmentService: ‚úÖ');
    print('‚Ä¢ Initialis√©: ${_isInitialized ? '‚úÖ' : '‚ùå'}');

    // V√©rification des d√©pendances circulaires
    print(
        '‚Ä¢ D√©pendances circulaires r√©solues: ${_checkCircularDependencies()}');
  }

  String _checkCircularDependencies() {
    try {
      // V√©rifier si les d√©pendances circulaires sont correctement r√©solues
      // Vous pouvez ajouter des v√©rifications sp√©cifiques ici si n√©cessaire
      return '‚úÖ';
    } catch (e) {
      return '‚ùå ($e)';
    }
  }
}
